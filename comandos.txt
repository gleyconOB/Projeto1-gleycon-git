-------------------------------------1 iniciar repositório--------------------------------------------------

git init: cria um novo repositório do git, ou converte um projeto não versionado em um repositório do git.
git status: ver o local onde o código esta, ou se esta atualizado ou não.
*Commits: são versões do código.(copias do código)
*Untracked files: os arquivos não foram adicionados ao controle de versões, aponta quais os arquivos não estão no controle de versão. 

----------------------------2 adicionar arquivos ao controle de versão--------------------------------------

git add "nome do arquivo.tipo do aquivo": prepara o arquivo para o controle de versão. 
giti add .: adiciona todos os arquivos pendentes no controle de versão.

----------------------------3 criar versões do código com commit--------------------------------------------

git commit -m "mensagem que representa oque foi feito naquela versão": cria a primeira versão "commit inicial"
git config --global user.email"seuemail@gmail.com": é usado para configurar o e-mail de um usuário no sistema de controle de versão Git
*git config: comando para configurar opções de usuario, repositorio ou sistema.
*--global: opção que define a configuração em nivel global, as configurações serão aplicadas a todos os repositorios do usuario no sistema 
git config --global user.name"seu nome": define o nome do usuario no sistema de controle de versão.

----------------------------4 enviar alterações com git push------------------------------------------------

git remote add origin <url do seu repositorio>: adiciona um repositorio remoto no endereço
*branch: divisões ou versões diferentes do código, que estão sendo versionadas de forma separada.(normalmente enviar para a master)
 git push --set-upstream origin master.

----------------------------5 atualização do codigo------------------------------------------------
alterar algum arquivo, depois seguir o passo 2 e 3 commit -m, depois o 4 git push

----------------------------6 historico de atualização------------------------------------------------
git reflog: permite visualizar o historio de referencias do git, incluindo todos os commits que afetaram o repositório(ótimo para recuperar alterações desfeitas ou perdidas.

----------------------------7 navegar entre versões dos códigos------------------------------------------------
git reset --hard <id da versão para qual vc quer voltar>: navega entre as versão, mas consultar seu analista se na empresa usam esse método, ou pode olhar a documentação.

----------------------------8 Branch, oque é, e como criar------------------------------------------------
galhos: local para armazenar o versionamento do seu código - a master sempre é a principal.
merge: pega somente os códigos que funcionar e junte na branch master, onde vai ficar estável, as outras branch são criadas para ir testando, usar funcionalidades novas.

git branch: mostra as branch disponíveis(a marcada com * e verde, é a branch que estamos utilizando no momento)
git branch staging : cria uma nova branch chamado staging(nome para uma branch que recebe atualização que nao estão testadas em produção), para criar uma branch de acordo com o que você esta fazendo, use git branch nome.
git checkout nome da branch: muda as branch
git push --set-upstream origin nome da branch: da push e leva pro github 

----------------------------9 merge, unir arquivos na branch------------------------------------------------
altere para a branch principal
git checkout master: altera pra branch principal
git merge nome branch segundarario: puxa todas as atualizações da branch secundaria para a principal
antes de dar merge, verificar que esta com a versão mais atualizada, antes do merge usar git pull
git pull:usado para buscar e baixar conteudo de repositorio remoto e fazer a atualização imediata ao repositorio local para que os conteudos sejam iguais.   